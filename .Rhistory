colnames(gene_IDs) <- c("gene_id","ENSEMBL")
}else{
gene_IDs <- AnnotationDbi::select(org(Species), keys = my.symbols,
keytype = "SYMBOL",
columns = c("SYMBOL","ENTREZID"))
colnames(gene_IDs) <- c("SYMBOL","gene_id")
}
y <- subset(x, gene_id %in% gene_IDs$gene_id)
if(length(rownames(as.data.frame(y))) == 0) stop("Incorrect species")
seq <- getSeq(genome, y)
pfm <- getMatrixByID(JASPAR2020,target_motif$motif.id)
pwm <- toPWM(pfm)
res <- findMotifHits(query = pwm,
subject = seq,
min.score = 6.0,
method = "matchPWM",
BPPARAM = BiocParallel::SerialParam()) %>% as.data.frame()
my.symbols <- as.character(res$seqnames)
gene_IDs <- AnnotationDbi::select(org(Species), keys = my.symbols,
keytype = "ENTREZID",
columns = c("SYMBOL","ENTREZID"))
colnames(gene_IDs) <- c("seqnames","SYMBOL")
res2<-merge(gene_IDs,res,by="seqnames")
res2 <- res2[,-1]
return(res2)
}
Motifplot <- function(df2, showCategory=5,padj){
df <- data.frame(matrix(rep(NA, 11), nrow=1))[numeric(0), ]
for(name in names(df2)){
res <- df2[[name]]
res <- dplyr::filter(res, X1 > -log10(padj))
res <- res %>% dplyr::arrange(-X1.1)
if(length(rownames(res)) > showCategory){
res <- res[1:showCategory,]
}
df <- rbind(df, res)
}
colnames(df) <- c("motif.id", "motif.name","motif.percentGC", "negLog10P", "negLog10Padj", "log2enr",
"pearsonResid", "expForegroundWgtWithHits", "sumForegroundWgtWithHits", "sumBackgroundWgtWithHits",
"Group")
if(length(df$motif.id) == 0){
return(NULL)
}else{
df$padj <- 10^(-df$negLog10Padj)
df <- dplyr::mutate(df, x = paste0(Group, 1/-log10(eval(parse(text = "padj")))))
df$x <- gsub(":","", df$x)
df <- dplyr::arrange(df, x)
idx <- order(df[["x"]], decreasing = FALSE)
df$motif.name <- factor(df$motif.name,
levels=rev(unique(df$motif.name[idx])))
d <- ggplot(df, aes(x = Group,y= motif.name,color=padj,size=log2enr))+
geom_point() +
scale_color_continuous(low="red", high="blue",
guide=guide_colorbar(reverse=TRUE)) +
scale_size(range=c(1, 6))+ theme_dose(font.size=15)+ylab(NULL)+xlab(NULL) +
scale_y_discrete(labels = label_wrap_gen(30)) + scale_x_discrete(position = "top")+
theme(plot.margin=margin(l=-0.75,unit="cm"))
df <- df %>% distinct(motif.id, .keep_all = T)
width.seqlogo = 2
highlight <- NULL
clres <- FALSE
optsL <- list(ID = df$motif.id)
pfm1 <- TFBSTools::getMatrixSet(JASPAR2020, opts = optsL)
maxwidth <- max(vapply(TFBSTools::Matrix(pfm1), ncol, 0L))
grobL <- lapply(pfm1, seqLogoGrob, xmax = maxwidth, xjust = "center")
hmSeqlogo <- HeatmapAnnotation(logo = annoSeqlogo(grobL = grobL,
which = "row", space = unit(1, "mm"),
width = unit(width.seqlogo, "inch")),
show_legend = FALSE, show_annotation_name = FALSE,
which = "row")
tmp <- matrix(rep(NA, length(df$motif.id)),ncol = 1,
dimnames = list(df$motif.name, NULL))
hmMotifs <- Heatmap(matrix = tmp, name = "names", width = unit(0, "inch"),
na_col = NA, col = c(`TRUE` = "green3",`FALSE` = "white"),
cluster_rows = clres, show_row_dend = show_dendrogram,
cluster_columns = FALSE, show_row_names = TRUE, row_names_side = "left",
show_column_names = FALSE, show_heatmap_legend = FALSE,
left_annotation = hmSeqlogo)
h <- grid.grabExpr(print(hmMotifs),wrap.grobs=TRUE)
p <- plot_grid(plot_grid(NULL, h, ncol = 1, rel_heights = c(0.05:10)),as.grob(d))
return(p)
}
}
GOIheatmap <- function(data.z, show_row_names = TRUE){
ht <- Heatmap(data.z, name = "z-score",column_order = colnames(data.z),
clustering_method_columns = 'ward.D2',
show_row_names = show_row_names, show_row_dend = F,column_names_side = "top",
row_names_gp = gpar(fontface = "italic"))
return(ht)
}
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/EpigenomeChef')
LoadFile
simple = FALSE
sepr = "\t"
simplify = FALSE
LoadFile <- "/Volumes/Extreme SSD/NextSeq20230330_ATAC/fastqgz/ATACorrect_Sen_2_indep/BINDetect_output/MAFGNFE2L1_MA0089.2/beds/MAFGNFE2L1_MA0089.2_Pro_bound.bed"
if (sum(class(LoadFile) == "character")) {
RangesTable <- read.delim(LoadFile, sep = sepr, header = FALSE,
comment.char = "#")
if(str_detect(RangesTable[1,2], "tart") == TRUE || is.na(RangesTable[1,2])) {
RangesTable <- RangesTable[-1,]
}else RangesTable <- RangesTable
}
Chromosomes <- as.vector(RangesTable[, 1])
Start <- as.numeric(as.vector(RangesTable[, 2]))
End <- as.numeric(as.vector(RangesTable[, 3]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 4])
Score <- as.vector(RangesTable[, 5])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
RegionRanges
files<-c()
files<-c("/Volumes/Extreme SSD/NextSeq20230330_ATAC/fastqgz/ATACorrect_Sen_2_indep/BINDetect_output/MAFGNFE2L1_MA0089.2/beds/MAFGNFE2L1_MA0089.2_Pro_bound.bed","/Volumes/Extreme SSD/NextSeq20230330_ATAC/fastqgz/ATACorrect_Sen_2_indep/BINDetect_output/MAFGNFE2L1_MA0089.2/beds/MAFGNFE2L1_MA0089.2_Sen_bound.bed")
files2 <- lapply(files, GetGRanges, simple = TRUE)
files2
peak_list <- files2
peak_names = names(peak_list)
percent = TRUE
stranded = FALSE
true_overlaps = FALSE
if (!is.list(peak_list)) {
stop("'peak_list' must be a (named) list of dataframes with, at least, the columns 'seqnames', 'start' and 'end'.")
}
if (length(peak_list) != length(peak_names)) {
stop("'peak_names' must be a character vector with the same length as 'peak_list'.")
}
peak_names
names(peak_list) <- c("Pro", "Sen")
peak_names = names(peak_list)
if (!is.list(peak_list)) {
stop("'peak_list' must be a (named) list of dataframes with, at least, the columns 'seqnames', 'start' and 'end'.")
}
if (length(peak_list) != length(peak_names)) {
stop("'peak_names' must be a character vector with the same length as 'peak_list'.")
}
if (stranded) {
if (!"strand" %in% colnames(bind_rows(peak_list))) {
stop("If 'stranded' is TRUE, a 'strand' column must be present in all the elements from peak list.")
}
else {
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x,
strand = if_else(strand %in% c("\\.", "\\*",
".", "*"), "*", strand)))
}
}
if (true_overlaps & length(peak_list) == 2) {
stranded <- FALSE
percent <- FALSE
}
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x,
strand = if_else(strand %in% c(".", "*", "\\.", "\\*"),
"*", strand)))
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
x <- getVennCounts(peaks = peak_list, conds = peak_names,
stranded = stranded)
in_fill = c("blue",
"gold3")
alpha = 0.4
out_color = "black"
name_color = "black"
text_color = "black"
name_size = 5
label_size = 3
title = ""
subtitle = ""
return_peaks = FALSE
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x,
strand = if_else(strand %in% c("\\.", "\\*",
".", "*"), "*", strand)))
rlang::last_error()
if (stranded) {
if (!"strand" %in% colnames(bind_rows(peak_list))) {
stop("If 'stranded' is TRUE, a 'strand' column must be present in all the elements from peak list.")
}
else {
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x,
strand = if_else(strand %in% c("\\.", "\\*",
".", "*"), "*", strand)))
}
}
if (true_overlaps & length(peak_list) == 2) {
stranded <- FALSE
percent <- FALSE
}
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x,
strand = if_else(strand %in% c(".", "*", "\\.", "\\*"),
"*", strand)))
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peak_list
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 1,
label.padding=.1,
na.rm=TRUE) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 1,
label.padding=.1) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
alpha = 0.6,
label.padding=1,
na.rm=TRUE) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
alpha = 0.6,
label.padding=.35,
na.rm=TRUE) +
theme_bw()
runApp('Desktop/Rproject/RNAseqChef')
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_bw()
library(ggplot2)
library(ggrepel)
library(stringi)
set.seed(1)
df <- data.frame(x=rnorm(10000),
y=rnorm(10000),
label=NA)
df$label[1:26] <- stringi::stri_rand_strings(26,8)
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_bw()
runApp('Desktop/Rproject/RNAseqChef')
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
label.padding=.1,
na.rm=TRUE,
fill = alpha(c("white"),0.5))
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
label.padding=.1,
na.rm=TRUE,
fill = alpha("white",0.5))
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.75,
fontface = 'bold', color = 'black',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE) +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE) +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,fill = alpha("white", 0.5)) +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,alpha("white", 0.5)) +
theme_bw()
runApp('Desktop/Rproject/RNAseqChef')
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,colour="white") +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label,fill="white"),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,) +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label,fill=alpha("white", 0.5)),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,) +
theme_bw()
ggplot(df, aes(x, y)) +
geom_point(alpha=.3) +
geom_label_repel(aes(label=label,alpha("white", 0.5)),
label.size = NA,
alpha = 0.75,
fontface = 'bold',
box.padding = 0.80, point.padding = 0.5,
na.rm=TRUE,) +
theme_bw()
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
get_data_from_KEGG_db("arabidopsis")
get_data_from_KEGG_db("ath")
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
BiocManager::install("clusterProfiler")
BiocManager::install("enrichplot")
BiocManager::install("DOSE")
BiocManager::install("clusterProfiler",update = T)
BiocManager::install("clusterProfiler",force=TRUE)
BiocManager::install("enrichplot")
BiocManager::install("DOSE")
runApp('Desktop/Rproject/RNAseqChef_imeg')
data(geneList, package='DOSE')
de <- names(geneList)[1:100]
yy <- enrichKEGG(de, pvalueCutoff=0.01)
BiocManager::install("enrichplot")
remove.packages("clusterProfiler")
BiocManager::install("clusterProfiler")
BiocManager::install("KEGG.db")
BiocManager::install("downloader")
BiocManager::install("AnnotationDbi")
remove.packages("enrichplot")
BiocManager::install("enrichplot")
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
remove.packages("AnnotationDbi")
BiocManager::install("AnnotationDbi")
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
BiocManager::install("enrichplot")
runApp('Desktop/Rproject/RNAseqChef_imeg')
