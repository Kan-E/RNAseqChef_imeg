CA <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "A") %>% dim()
AC <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "C") %>% dim()
AT <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "T") %>% dim()
AG <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "G") %>% dim()
GA <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "A") %>% dim()
GC <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "C") %>% dim()
GT <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "T") %>% dim()
TG[1]+AC[1]
TA[1]+AT[1]
TC[1]+AG[1]
CT[1]+GA[1]
CG[1]+GC[1]
CA[1]+GT[1]
TG[1]+AC[1]+TA[1]+AT[1]+TC[1]+AG[1]+CT[1]+GA[1]+CG[1]+GC[1]+CA[1]+GT[1]
##Silentを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(Variant_Classification != "Silent")
data <- data %>% dplyr::filter(is.na(Codon_Change))
TG <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "G") %>% dim()
TA <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "A") %>% dim()
TC <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "C") %>% dim()
CT <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "T") %>% dim()
CG <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "G") %>% dim()
CA <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "A") %>% dim()
AC <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "C") %>% dim()
AT <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "T") %>% dim()
AG <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "G") %>% dim()
GA <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "A") %>% dim()
GC <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "C") %>% dim()
GT <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "T") %>% dim()
TG[1]+AC[1]
TA[1]+AT[1]
TC[1]+AG[1]
CT[1]+GA[1]
CG[1]+GC[1]
CA[1]+GT[1]
##Silentを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(Variant_Classification != "Silent")
data <- data %>% dplyr::filter(!is.na(Codon_Change))
TG <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "G") %>% dim()
TA <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "A") %>% dim()
TC <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "C") %>% dim()
CT <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "T") %>% dim()
CG <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "G") %>% dim()
CA <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "A") %>% dim()
AC <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "C") %>% dim()
AT <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "T") %>% dim()
AG <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "G") %>% dim()
GA <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "A") %>% dim()
GC <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "C") %>% dim()
GT <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "T") %>% dim()
table <- c(CA=CA[1]+GT[1], CG=CG[1]+GC[1], CT = CT[1]+GA[1],
TC=TC[1]+AG[1], TA=TA[1]+AT[1], TG = TG[1]+AC[1])
get_titvCol = function(alpha = 1){
col = c("#F44336", "#3F51B5", "#2196F3", "#4CAF50", "#FFC107", "#FF9800")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('C>T', 'C>G', 'C>A', 'T>A', 'T>C', 'T>G')
col
}
names(table) <- c('C>A', 'C>G', 'C>T','T>C','T>A','T>G')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
TG <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "G") %>% dim()
TA <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "A") %>% dim()
TC <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "C") %>% dim()
CT <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "T") %>% dim()
CG <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "G") %>% dim()
CA <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "A") %>% dim()
AC <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "C") %>% dim()
AT <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "T") %>% dim()
AG <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "G") %>% dim()
GA <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "A") %>% dim()
GC <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "C") %>% dim()
GT <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "T") %>% dim()
table <- c(CA=CA[1]+GT[1], CG=CG[1]+GC[1], CT = CT[1]+GA[1],
TC=TC[1]+AG[1], TA=TA[1]+AT[1], TG = TG[1]+AC[1])
get_titvCol = function(alpha = 1){
col = c("#F44336", "#3F51B5", "#2196F3", "#4CAF50", "#FFC107", "#FF9800")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('C>T', 'C>G', 'C>A', 'T>A', 'T>C', 'T>G')
col
}
names(table) <- c('C>A', 'C>G', 'C>T','T>C','T>A','T>G')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
table
data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
##Silentを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(Variant_Classification != "Silent")
data <- data %>% dplyr::filter(is.na(Codon_Change))
data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
##Silentを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(is.na(Codon_Change))
data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
data
dplyr::filter(data,Variant_Classification == "Silent")
unique(data$Variant_Classification)
dplyr::filter(data,Variant_Classification == "DE_NOVO_START_OUT_FRAME")
dplyr::filter(data,Variant_Classification == "DE_NOVO_START_OUT_FRAME")
dplyr::filter(data,Variant_Classification == "DE_NOVO_START_OUT_FRAME")
laml <- read.maf(maf = "summary_60genes.maf",clinicalData = "clinical_data.txt",
vc_nonSyn = c("Frame_Shift_Del","Missense_Mutation","Nonstop_Mutation","Splice_Region",
"In_Frame_Del","In_Frame_Ins","Frame_Shift_Ins","Intron","5'UTR","3'UTR","5'Flank",
"Translation_Start_Site","frameshift_variant","IGR","DE_NOVO_START_OUT_FRAME"))         ##Silentを除く
laml
##Silentを除く, DE_NOVO_START_OUT_FRAMEを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(is.na(Codon_Change))
data <- data %>% dplyr::filter(Variant_Classification != "DE_NOVO_START_OUT_FRAME")
data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
TG <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "G") %>% dim()
TA <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "A") %>% dim()
TC <- data %>% dplyr::filter(Reference_Allele == "T" & Tumor_Seq_Allele2 == "C") %>% dim()
CT <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "T") %>% dim()
CG <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "G") %>% dim()
CA <- data %>% dplyr::filter(Reference_Allele == "C" & Tumor_Seq_Allele2 == "A") %>% dim()
AC <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "C") %>% dim()
AT <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "T") %>% dim()
AG <- data %>% dplyr::filter(Reference_Allele == "A" & Tumor_Seq_Allele2 == "G") %>% dim()
GA <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "A") %>% dim()
GC <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "C") %>% dim()
GT <- data %>% dplyr::filter(Reference_Allele == "G" & Tumor_Seq_Allele2 == "T") %>% dim()
TG[1]+AC[1]
TA[1]+AT[1]
TC[1]+AG[1]
CT[1]+GA[1]
CG[1]+GC[1]
CA[1]+GT[1]
table <- c(CA=CA[1]+GT[1], CG=CG[1]+GC[1], CT = CT[1]+GA[1],
TC=TC[1]+AG[1], TA=TA[1]+AT[1], TG = TG[1]+AC[1])
get_titvCol = function(alpha = 1){
col = c("#F44336", "#3F51B5", "#2196F3", "#4CAF50", "#FFC107", "#FF9800")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('C>T', 'C>G', 'C>A', 'T>A', 'T>C', 'T>G')
col
}
names(table) <- c('C>A', 'C>G', 'C>T','T>C','T>A','T>G')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
##Silentを除く, DE_NOVO_START_OUT_FRAMEを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(Variant_Classification != "Silent")
data <- data %>% dplyr::filter(!is.na(Codon_Change))
data %>% dplyr::filter(Variant_Classification == "Missense_Mutation") %>% dim()
data %>% dplyr::filter(Variant_Classification == "In_Frame_Del") %>% dim()
data %>% dplyr::filter(Variant_Classification == "In_Frame_Ins") %>% dim()
data %>% dplyr::filter(Variant_Classification == "Splice_Site") %>% dim()
data %>% dplyr::filter(Variant_Classification == "Frame_Shift_Del") %>% dim()
data %>% dplyr::filter(Variant_Classification == "Frame_Shift_Ins") %>% dim()
sum(as.data.frame(laml@variant.type.summary)$SNP)
data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
SNP <- data %>% dplyr::filter(Variant_Type == "SNP")
INS <- data %>% dplyr::filter(Variant_Type == "INS")
DEL <- data %>% dplyr::filter(Variant_Type == "DEL")
table <- c(SNP=SNP[1], INS=INS[1], DEL = DEL[1])
get_titvCol = function(alpha = 1){
col = c("blue4", "yellow2", "green3")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('SNP', 'INS', 'DEL')
col
}
names(table) <- c('SNP', 'INS', 'DEL')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
table
SNP <- data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
INS <- data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
DEL <- data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
table <- c(SNP=SNP[1], INS=INS[1], DEL = DEL[1])
get_titvCol = function(alpha = 1){
col = c("blue4", "yellow2", "green3")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('SNP', 'INS', 'DEL')
col
}
names(table) <- c('SNP', 'INS', 'DEL')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
table <- c(DEL = DEL[1], INS=INS[1], SNP=SNP[1])
get_titvCol = function(alpha = 1){
col = c("blue4", "yellow2", "green3")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('SNP', 'INS', 'DEL')
col
}
names(table) <- c('DEL', 'INS', 'SNP')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
##Silentを除く, DE_NOVO_START_OUT_FRAMEを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(is.na(Codon_Change))
data <- data %>% dplyr::filter(Variant_Classification != "DE_NOVO_START_OUT_FRAME")
SNP <- data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
INS <- data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
DEL <- data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
table <- c(DEL = DEL[1], INS=INS[1], SNP=SNP[1])
get_titvCol = function(alpha = 1){
col = c("blue4", "yellow2", "green3")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('SNP', 'INS', 'DEL')
col
}
names(table) <- c('DEL', 'INS', 'SNP')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
axis(side = 2, lwd = 1.2, font = 3, las = 2)
axis(side = 1, lwd = 1.2, font = 3, las = 3)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 4)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))],xlim = c(1,5e+06))
axis(side = 1, lwd = 1.2, font = 3, las = 2)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))],xlim = c(0,5e+06))
axis(side = 1, lwd = 1.2, font = 3, las = 2)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))])
axis(side = 1, lwd = 1.2, font = 3, las = 2)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))],xlim = c(1,5e+05))
axis(side = 1, lwd = 1.2, font = 3, las = 2)
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))],xlim = c(0,5e+05))
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
##Silentを除く, DE_NOVO_START_OUT_FRAMEを除く
data <- readr::read_delim("selected 60 gene mutation_26probe.txt")
data <- data %>% dplyr::filter(Variant_Classification != "Silent")
data <- data %>% dplyr::filter(!is.na(Codon_Change))
SNP <- data %>% dplyr::filter(Variant_Type == "SNP") %>% dim()
INS <- data %>% dplyr::filter(Variant_Type == "INS") %>% dim()
DEL <- data %>% dplyr::filter(Variant_Type == "DEL") %>% dim()
table <- c(DEL = DEL[1], INS=INS[1], SNP=SNP[1])
get_titvCol = function(alpha = 1){
col = c("blue4", "yellow2", "green3")
#col = c('coral4', 'lightcyan4', 'cornflowerblue', 'lightsalmon1', 'forestgreen', 'deeppink3')
col = grDevices::adjustcolor(col = col, alpha.f = alpha)
names(col) = c('SNP', 'INS', 'DEL')
col
}
names(table) <- c('DEL', 'INS', 'SNP')
titv.color = get_titvCol()
b = barplot(table, axes = FALSE, horiz = TRUE,
border = NA,col = titv.color[rownames(as.data.frame(table))],xlim = c(0,3500))
axis(side = 1, lwd = 1.2, font = 3, las = 2)
title(main = "SNV Class", adj = 0, font = 3)
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
laml <- read.maf(maf = "summary_60genes.maf",clinicalData = "clinical_data.txt",
vc_nonSyn = c("Frame_Shift_Del","Missense_Mutation","Nonstop_Mutation","Splice_Region",
"In_Frame_Del","In_Frame_Ins","Frame_Shift_Ins","Intron","5'UTR","3'UTR","5'Flank",
"Translation_Start_Site","frameshift_variant","IGR"))         ##Silentを除く
tmb(laml)
laml
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
genes <- read.table("04316389_NGS-Targets_strand+covered%1+周囲遺伝子情報.txt")
genes <- genes$V1
clinic <- read.table("clinical_data.txt",header = T)
for(gene in genes){
print(gene)
laml_x  <- try(subsetMaf(maf = laml, genes = gene, mafObj = TRUE))
if(class(laml_x) != "try-error"){
tmb_x <- tmb(laml_x)
tmb_x <- as.data.frame(tmb_x)[,1:2]
colnames(tmb_x)[2] <- gene
clinic <- merge(clinic,tmb_x,by="Tumor_Sample_Barcode",all=T)
}
}
clinic
clinic[is.na(clinic)] <- 0
write.table(clinic,file = "20240909TMB_for_26probes_noncoding.txt",row.names = F,col.names = T,quote=F,sep = "\t")
laml <- read.maf("summary_60genes_convert_to_26genes.maf",clinicalData = "clinical_data.txt")
laml <- read.maf(maf = "summary_60genes_convert_to_26genes.maf",clinicalData = "clinical_data.txt",
vc_nonSyn = c("Frame_Shift_Del","Missense_Mutation","Nonstop_Mutation","Splice_Region",
"In_Frame_Del","In_Frame_Ins","Frame_Shift_Ins","Intron","5'UTR","3'UTR","5'Flank",
"Translation_Start_Site","frameshift_variant","IGR"))
clinic <- read.table("clinical_data.txt",header = T)
for(gene in genes){
print(gene)
laml_x  <- try(subsetMaf(maf = laml, genes = gene, mafObj = TRUE))
if(class(laml_x) != "try-error"){
tmb_x <- tmb(laml_x)
tmb_x <- as.data.frame(tmb_x)[,1:2]
colnames(tmb_x)[2] <- gene
clinic <- merge(clinic,tmb_x,by="Tumor_Sample_Barcode",all=T)
}
}
clinic[is.na(clinic)] <- 0
write.table(clinic,file = "20240909TMB_for_26probes_noncoding.txt",row.names = F,col.names = T,quote=F,sep = "\t")
shiny::runApp('~/Desktop/Rproject/RNAseqChef_imeg')
setwd("/Users/kanetoh")
ui <- navbarPage("Navbar page", id = "tabs",
tabPanel("Home",
actionButton("hideTab", "Hide 'Foo' tab"),
actionButton("showTab", "Show 'Foo' tab"),
actionButton("hideMenu", "Hide 'More' navbarMenu"),
actionButton("showMenu", "Show 'More' navbarMenu")
),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab"),
navbarMenu("More",
tabPanel("Table", "Table page"),
tabPanel("About", "About page"),
"------",
"Even more!",
tabPanel("Email", "Email page")
)
)
server <- function(input, output, session) {
observeEvent(input$hideTab, {
hideTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$showTab, {
showTab(inputId = "tabs", target = "Foo")
})
observeEvent(input$hideMenu, {
hideTab(inputId = "tabs", target = "More")
})
observeEvent(input$showMenu, {
showTab(inputId = "tabs", target = "More")
})
}
shinyApp(ui, server)
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/RNAseqChef_imeg')
data <- read.table("/Users/kanetoh/R_source/shscript/202409Ohguchi-sensei/20240913_GeneMat_Count-DESeq2-BH_fc2_fdr0.05_basemean0_Pair-wiseDEG/DEG_result/DEG_result.txt",header = T,row.names = 1)
genes_ensembl <- try(getBM(attributes = c("external_gene_name","gene_biotype"), mart = use))
library(biomaRt)
mart <- "ensembl"
ensembl_archive <- "https://dec2021.archive.ensembl.org"
mart <- "ensembl"
db <- useMart(mart, host=ensembl_archive)
ensembl <- "mmusculus_gene_ensembl"
use <- useDataset(ensembl, mart = db)
genes_ensembl <- try(getBM(attributes = c("external_gene_name","gene_biotype"), mart = use))
genes_ensembl <- genes_ensembl %>% distinct(external_gene_name, .keep_all = T)
genes <- data.frame(biotype = genes_ensembl$gene_biotype,row.names = genes_ensembl$external_gene_name)
genes_ensembl <- try(getBM(attributes = c("ensembl_gene_id","gene_biotype"), mart = use))
genes_ensembl <- genes_ensembl %>% distinct(ensembl_gene_id, .keep_all = T)
genes <- data.frame(biotype = genes_ensembl$gene_biotype,row.names = genes_ensembl$ensembl_gene_id)
data2 <- merge(data,genes,by=0)
dim(data2)
head(data2)
rownames(data2)<-data2$Row.names
data2<-data2[,-1]
head(data2)
data2$log2FoldChange <- -1*data2$log2FoldChange
data2 <- data2 %>% dplyr::filter(baseMean > 5)
data2 <- dplyr::filter(data2,!is.na(log2FoldChange))
stat.test <- data2 %>% tukey_hsd(log2FoldChange ~ biotype)
stat.test <- stat.test %>% add_significance("p.adj")
head(data2)
head(genes)
ensembl <- "hsapiens_gene_ensembl" #human
use <- useDataset(ensembl, mart = db)
genes_ensembl <- try(getBM(attributes = c("external_gene_name","gene_biotype"), mart = use))
genes_ensembl <- genes_ensembl %>% distinct(external_gene_name, .keep_all = T)
genes <- data.frame(biotype = genes_ensembl$gene_biotype,row.names = genes_ensembl$external_gene_name)
genes_ensembl <- try(getBM(attributes = c("ensembl_gene_id","gene_biotype"), mart = use))
genes_ensembl <- genes_ensembl %>% distinct(ensembl_gene_id, .keep_all = T)
genes <- data.frame(biotype = genes_ensembl$gene_biotype,row.names = genes_ensembl$ensembl_gene_id)
data2 <- merge(data,genes,by=0)
dim(data2)
head(data2)
rownames(data2)<-data2$Row.names
data2<-data2[,-1]
head(data2)
data2$log2FoldChange <- -1*data2$log2FoldChange
data2 <- data2 %>% dplyr::filter(baseMean > 5)
data2 <- dplyr::filter(data2,!is.na(log2FoldChange))
stat.test <- data2 %>% tukey_hsd(log2FoldChange ~ biotype)
stat.test <- stat.test %>% add_significance("p.adj")
stat.test <- stat.test %>% add_xy_position(scales = "free", step.increase = 0.2)
p <- try(ggpubr::ggboxplot(data2, x = "biotype", y = "log2FoldChange",
fill = "biotype", scales = "free",
xlab = FALSE, ylab = "log2FoldChange")+theme_bw(base_size = 15)+guides(fill=guide_legend(title="RNA type"))+
xlab(NULL)+ylab(paste0("RNAseq log2(Dis3 KO/WT)"))+ scale_x_discrete(labels = label_wrap_gen(8)))
p <- p + stat_pvalue_manual(stat.test,hide.ns = T, size = 5)
print(p)
setwd("/Users/kanetoh/R_source/shscript/202409Ohguchi-sensei")
pdf("boxplot_all.pdf",height = 4,width = 15)
print(p)
dev.off()
stat.test <- as.data.frame(stat.test)[,-1]
stat.test <- stat.test[,-9:-12]
write.table(stat.test,file = "boxplot_all.txt",row.names = F,quote = F,sep = "\t")
data3 <- data3 %>% dplyr::filter(baseMean > 10)
data3 <- data2 %>% dplyr::filter(biotype == "protein_coding" | biotype=="lncRNA")
data3$biotype <- factor(data3$biotype,levels=c("protein_coding","lncRNA"),ordered=TRUE)
collist <- unique(data3$biotype)
col <- c("gray","#F8766D")
data3$log2FoldChange <- -1*data3$log2FoldChange
group1 <- dplyr::filter(data3, biotype == collist[1])
group2 <- dplyr::filter(data3, biotype == collist[2])
if(length(rownames(group1)) >1 && length(rownames(group2)) >1){
stat.test <- data3 %>% t_test(log2FoldChange ~ biotype)
stat.test <- stat.test %>% add_significance()
stat.test <- stat.test %>% add_xy_position(scales = "free", step.increase = 0.2)
}else stat.test <- NULL
p <- try(ggpubr::ggboxplot(data3, x = "biotype", y = "log2FoldChange",
fill = "biotype", scales = "free",
xlab = FALSE, ylab = "log2FoldChange")+theme_bw(base_size = 15)+guides(fill=guide_legend(title="RNA type"))+
xlab(NULL)+ylab(paste0("RNAseq log2(Dis3 KO/WT)"))+scale_fill_manual(values = col) + scale_x_discrete(labels = label_wrap_gen(8)))
p <- p + stat_pvalue_manual(stat.test,hide.ns = T, size = 5)
stat.test <- stat.test[,2:9]
print(p)
data3 <- data3 %>% dplyr::filter(baseMean > 10)
data3$biotype <- factor(data3$biotype,levels=c("protein_coding","lncRNA"),ordered=TRUE)
collist <- unique(data3$biotype)
col <- c("gray","#F8766D")
data3$log2FoldChange <- -1*data3$log2FoldChange
group1 <- dplyr::filter(data3, biotype == collist[1])
group2 <- dplyr::filter(data3, biotype == collist[2])
if(length(rownames(group1)) >1 && length(rownames(group2)) >1){
stat.test <- data3 %>% t_test(log2FoldChange ~ biotype)
stat.test <- stat.test %>% add_significance()
stat.test <- stat.test %>% add_xy_position(scales = "free", step.increase = 0.2)
}else stat.test <- NULL
p <- try(ggpubr::ggboxplot(data3, x = "biotype", y = "log2FoldChange",
fill = "biotype", scales = "free",
xlab = FALSE, ylab = "log2FoldChange")+theme_bw(base_size = 15)+guides(fill=guide_legend(title="RNA type"))+
xlab(NULL)+ylab(paste0("RNAseq log2(Dis3 KO/WT)"))+scale_fill_manual(values = col) + scale_x_discrete(labels = label_wrap_gen(8)))
p <- p + stat_pvalue_manual(stat.test,hide.ns = T, size = 5)
stat.test <- stat.test[,2:9]
print(p)
pdf("boxplot.pdf",height = 4,width = 5)
print(p)
dev.off()
write.table(as.data.frame(stat.test),"boxplot.txt",row.names = F,quote = F,sep = "\t")
data2 <- merge(data,genes,by=0)
dim(data2)
head(data2)
rownames(data2)<-data2$Row.names
data2<-data2[,-1]
head(data2)
data2$log2FoldChange <- -1*data2$log2FoldChange
data2 <- data2 %>% dplyr::filter(baseMean > 10)
data2 <- dplyr::filter(data2,!is.na(log2FoldChange))
stat.test <- data2 %>% tukey_hsd(log2FoldChange ~ biotype)
stat.test <- stat.test %>% add_significance("p.adj")
stat.test <- stat.test %>% add_xy_position(scales = "free", step.increase = 0.2)
p <- try(ggpubr::ggboxplot(data2, x = "biotype", y = "log2FoldChange",
fill = "biotype", scales = "free",
xlab = FALSE, ylab = "log2FoldChange")+theme_bw(base_size = 15)+guides(fill=guide_legend(title="RNA type"))+
xlab(NULL)+ylab(paste0("RNAseq log2(Dis3 KO/WT)"))+ scale_x_discrete(labels = label_wrap_gen(8)))
p <- p + stat_pvalue_manual(stat.test,hide.ns = T, size = 5)
p
p <- try(ggpubr::ggboxplot(data2, x = "biotype", y = "log2FoldChange",
fill = "biotype", scales = "free",
xlab = FALSE, ylab = "log2FoldChange")+theme_bw(base_size = 15)+guides(fill=guide_legend(title="RNA type"))+
xlab(NULL)+ylab(paste0("RNAseq log2(Dis3 KO/WT)"))+ scale_x_discrete(labels = label_wrap_gen(8)))
p
pdf("boxplot_all.pdf",height = 4,width = 15)
print(p)
dev.off()
stat.test <- as.data.frame(stat.test)[,-1]
stat.test <- stat.test[,-9:-12]
write.table(stat.test,file = "boxplot_all.txt",row.names = F,quote = F,sep = "\t")
runApp('~/Desktop/Rproject/RNAseqChef_imeg')
